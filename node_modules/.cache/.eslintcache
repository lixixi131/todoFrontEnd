[{"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\index.js":"1","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\App.js":"2","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\Todo.js":"3","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\AddTodo.js":"4","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\service\\ApiService.js":"5","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\app-config.js":"6","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\AppRouter.js":"7","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\Login.js":"8","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\SignUp.js":"9"},{"size":488,"mtime":1696395200119,"results":"10","hashOfConfig":"11"},{"size":4436,"mtime":1696479920108,"results":"12","hashOfConfig":"11"},{"size":2801,"mtime":1695710798066,"results":"13","hashOfConfig":"11"},{"size":1500,"mtime":1695701438491,"results":"14","hashOfConfig":"11"},{"size":3617,"mtime":1696386743481,"results":"15","hashOfConfig":"11"},{"size":224,"mtime":1695707847696,"results":"16","hashOfConfig":"11"},{"size":1233,"mtime":1696470122776,"results":"17","hashOfConfig":"11"},{"size":2353,"mtime":1696470108659,"results":"18","hashOfConfig":"11"},{"size":3627,"mtime":1696470083468,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"ru22kg",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\index.js",["51"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport AppRouter from './AppRouter';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <AppRouter/>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n",[],"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\App.js",["52","53","54","55"],[],"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\Todo.js",["56"],[],"import React from 'react'\r\nimport { useState , setState } from 'react';\r\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlineOutlined\";\r\nimport { ListItem ,ListItemText , InputBase , Checkbox , ListItemSecondaryAction , IconButton } from '@material-ui/core';\r\n\r\n\r\nconst Todo = ({item , items , setItems , key , deleteTodo , updateTodo}) =>{\r\n\r\n    const [readOnly,setReadOnly] = useState(true);\r\n\r\n    const deleteEventHandler = () =>{\r\n        deleteTodo(item);\r\n    }\r\n\r\n    const offReadOnlyMode = () =>{\r\n        setReadOnly(false);\r\n        \r\n    }\r\n\r\n    const enterKeyEventHandler = (e) =>{\r\n        if(e.key === \"Enter\"){\r\n            setReadOnly(true);\r\n        }\r\n    }\r\n\r\n    const editEventHandler = (e,id) =>{\r\n        const thisItem = item;\r\n        thisItem.title = e.target.value;\r\n        //console.log(e.target.value);\r\n\r\n        // items.map((item , idx) =>{\r\n\r\n        //     if(item.id === id){\r\n        //         let copied = [...items];\r\n        //         copied[idx].title = e.target.value;\r\n        //         setItems(copied)\r\n        //     }\r\n\r\n        // })\r\n\r\n        updateTodo(thisItem);\r\n\r\n\r\n    }\r\n\r\n\r\n    const todoCheckedHandler = (id) =>{\r\n        \r\n        const thisItem = item;\r\n        thisItem.done = item.done?false:true;\r\n        updateTodo(thisItem);\r\n\r\n        // items.map((item , idx) =>{\r\n\r\n        //     if(item.id === id){\r\n        //         let copied = [...items];\r\n        //         copied[idx].done = item.done?false:true;\r\n        //         setItems(copied)\r\n\r\n        //     }\r\n\r\n        // })\r\n\r\n\r\n    }\r\n\r\n    const checkboxEventHandler = (e) => {\r\n\r\n\r\n        setReadOnly(true);\r\n        updateTodo(item);\r\n\r\n\r\n    }\r\n\r\n\r\n    return(\r\n\r\n        <ListItem>\r\n            <Checkbox\r\n            checked = {item.done}\r\n            onClick={() => todoCheckedHandler(item.id)}\r\n            onChange={checkboxEventHandler}\r\n            />\r\n            <ListItemText>\r\n                <InputBase\r\n                inputProps = {{\"aria-label\" : \"naked\" , readOnly :readOnly}}\r\n                type = \"text\"\r\n                id = {item.id}\r\n                name = {item.name}\r\n                value = {item.title}\r\n                multiline = {true}\r\n                fullWidth = {true}\r\n                onClick = {offReadOnlyMode}\r\n                onChange={(e) => {editEventHandler(e, item.id)}}\r\n                onKeyDown={enterKeyEventHandler}\r\n                ></InputBase>\r\n            </ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton aria-label='Delete'\r\n                onClick={deleteEventHandler}>\r\n                    <DeleteOutlined></DeleteOutlined>\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Todo;","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\AddTodo.js",[],[],"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\service\\ApiService.js",["57"],[],"import { API_BASE_URL } from \"../app-config\";\r\nconst ACCESS_TOKEN = \"ACCESS_TOKEN\";\r\n\r\nexport function call(api, method, request){\r\n    let headers = new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n    });\r\n\r\n    const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if (accessToken)\r\n    {\r\n        headers.append(\"Authorization\",\"Bearer \" + accessToken);\r\n    }\r\n\r\n    let options = {\r\n        headers: headers,\r\n        url:API_BASE_URL + api,\r\n        method: method,\r\n    };\r\n\r\n    if(request){\r\n        options.body = JSON.stringify(request);\r\n    }\r\n\r\n    return fetch(options.url, options)\r\n    .then((response) => \r\n        response.json().then((json)=>{\r\n            if(!response.ok){\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    )        \r\n    .catch((error) =>{\r\n        console.log(\"Oops!\");\r\n        console.log(error.status);\r\n        console.log(\"Oops!\");\r\n        if(error.status === 403){\r\n                window.location.href = \"/login\";\r\n            }\r\n            return Promise.reject(error);\r\n        });\r\n}\r\n\r\n// 유저 정보 업데이트 전용 call\r\nexport function call_user(api, method, request){\r\n    let headers = new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n    });\r\n\r\n    const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if (accessToken)\r\n    {\r\n        headers.append(\"Authorization\",\"Bearer \" + accessToken);\r\n    }\r\n\r\n    let options = {\r\n        headers: headers,\r\n        url:API_BASE_URL + api,\r\n        method: method,\r\n    };\r\n\r\n    if(request){\r\n        options.body = JSON.stringify(request);\r\n    }\r\n    \r\n    return fetch(options.url, options)\r\n}\r\n\r\n\r\n//로그인을 위한 API 서비스 메소드 signin\r\nexport function signin(userDTO){\r\n    return call(\"/auth/signin\",\"POST\",userDTO)\r\n    .then((response) =>{\r\n        if(response.token){\r\n            //local 스토리지에 토큰 저장\r\n            localStorage.setItem(\"ACCESS_TOKEN\",response.token);\r\n            // 이메일을 로컬 스토리지에 저장\r\n            localStorage.setItem(\"email\",userDTO.email);\r\n            //token이 존재하는 경우 todo화면으로 이동\r\n            window.location.href =\"/\";\r\n        }\r\n    })\r\n}\r\n\r\n// 회원 가입 요청\r\nexport function signup(userDTO){\r\n    return call(\"/auth/signup\",\"POST\",userDTO)\r\n    .then((response) =>{\r\n        if(response.id){\r\n            window.location.href =\"/\";\r\n        }\r\n    })\r\n    .catch((error) =>{\r\n        console.log(\"Oops!\");\r\n        console.log(error.status);\r\n        console.log(\"Oops!\");\r\n        if(error.status === 403){\r\n                window.location.href = \"/auth/signup\";\r\n            }\r\n            return Promise.reject(error);  \r\n    });\r\n}\r\n// 회원 정보 수정 요청\r\nexport function infoedit(userDTO){\r\n    //info edit\r\n    return call_user(\"/auth/infoedit\",\"POST\",userDTO)\r\n    .then((response) =>{\r\n        if(response.id){\r\n            window.location.href =\"/\";\r\n        }\r\n    });\r\n}\r\n\r\n// //TodoDTO의 체크박스 내용 수정\r\n// export function todoedit(todoDTO){\r\n//     //info edit\r\n//     return call_user(\"/todo/todoedit\",\"POST\",todoDTO)\r\n//     .then((response) =>{\r\n//         if(response.id){\r\n//             window.location.href =\"/\";\r\n//         }\r\n//     });\r\n// }\r\n\r\n\r\nexport function infoedit_route(){\r\n    //info edit\r\n    window.location.href=\"/editinfo\";\r\n}\r\n// 로그아웃\r\nexport function signout(){\r\n    //local 스토리지에서 토큰을 삭제\r\n    localStorage.setItem(\"ACCESS_TOKEN\",null);\r\n    window.location.href=\"/login\";\r\n}\r\n\r\n\r\n//back24 front 14","C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\app-config.js",[],[],"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\AppRouter.js",["58","59"],[],"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\Login.js",[],[],"C:\\Users\\lixixi\\Desktop\\WEBKIT\\fuckNewQt\\app\\src\\SignUp.js",["60","61","62","63"],[],{"ruleId":"64","severity":1,"message":"65","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":11},{"ruleId":"64","severity":1,"message":"68","line":21,"column":9,"nodeType":"66","messageId":"67","endLine":21,"endColumn":20},{"ruleId":"69","severity":1,"message":"70","line":35,"column":6,"nodeType":"71","endLine":35,"endColumn":19,"suggestions":"72"},{"ruleId":"64","severity":1,"message":"73","line":40,"column":9,"nodeType":"66","messageId":"67","endLine":40,"endColumn":17},{"ruleId":"74","severity":1,"message":"75","line":40,"column":42,"nodeType":"76","messageId":"77","endLine":40,"endColumn":44},{"ruleId":"64","severity":1,"message":"78","line":2,"column":21,"nodeType":"66","messageId":"67","endLine":2,"endColumn":29},{"ruleId":"64","severity":1,"message":"79","line":2,"column":7,"nodeType":"66","messageId":"67","endLine":2,"endColumn":19},{"ruleId":"64","severity":1,"message":"80","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"81","line":9,"column":10,"nodeType":"66","messageId":"67","endLine":9,"endColumn":23},{"ruleId":"64","severity":1,"message":"82","line":3,"column":10,"nodeType":"66","messageId":"67","endLine":3,"endColumn":15},{"ruleId":"64","severity":1,"message":"83","line":3,"column":17,"nodeType":"66","messageId":"67","endLine":3,"endColumn":21},{"ruleId":"64","severity":1,"message":"84","line":3,"column":42,"nodeType":"66","messageId":"67","endLine":3,"endColumn":49},{"ruleId":"64","severity":1,"message":"85","line":3,"column":69,"nodeType":"66","messageId":"67","endLine":3,"endColumn":75},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'boardLength' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPost', 'indexOfFirstPost', and 'indexOfLastPost'. Either include them or remove the dependency array.","ArrayExpression",["86"],"'todoList' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setState' is defined but never used.","'ACCESS_TOKEN' is assigned a value but never used.","'useEffect' is defined but never used.","'ThemeProvider' is defined but never used.","'Paper' is defined but never used.","'List' is defined but never used.","'Toolbar' is defined but never used.","'AppBar' is defined but never used.",{"desc":"87","fix":"88"},"Update the dependencies array to be: [currentPost, indexOfFirstPost, indexOfLastPost, items, page]",{"range":"89","text":"90"},[954,967],"[currentPost, indexOfFirstPost, indexOfLastPost, items, page]"]